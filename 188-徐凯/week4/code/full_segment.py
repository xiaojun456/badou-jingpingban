# week4作业

# 词典：每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常": 0.1,
        "经": 0.05,
        "有": 0.1,
        "常": 0.001,
        "有意见": 0.1,
        "歧": 0.001,
        "意见": 0.2,
        "分歧": 0.2,
        "见": 0.05,
        "意": 0.05,
        "见分歧": 0.05,
        "分": 0.1}

# 待切分文本
sentence = "经常有意见分歧"


# 实现全切分函数，输出根据字典能够切分出的所有的切分方式
def full_segment(sentence, Dict):
    # 定义递归函数进行切分
    def dfs(index, path, results):
        # 如果当前索引已经达到句子末尾，将当前路径添加到结果中
        if index == len(sentence):
            results.append(path.copy())
            return
        # 遍历所有可能的切分长度
        for i in range(index, len(sentence)):
            word = sentence[index:i + 1]
            if word in Dict:  # 如果当前词在词典中，则进行递归切分
                path.append(word)  # 将当前词添加到路径中
                dfs(i + 1, path, results)  # 递归调用，从下一个位置开始切分
                path.pop()  # 回溯，移除当前路径的最后一个词，尝试其他可能的切分

    results = []  # 用于存储所有可能的切分结果
    dfs(0, [], results)  # 从句子的开始位置进行深度优先搜索
    return results


# 调用全切分函数
output = full_segment(sentence, Dict)

# 目标输出;顺序不重要
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]

print(output)
print(len(output) == len(target))
